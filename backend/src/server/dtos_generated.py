# generated by datamodel-codegen:
#   filename:  bpmn-schema.json
#   timestamp: 2023-05-17T10:43:57+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, List, Optional, Union

from pydantic import BaseModel, Extra, Field


class Model(BaseModel):
    __root__: Any


class Bounds(BaseModel):
    class Config:
        extra = Extra.forbid

    height: float
    width: float
    x: float
    y: float


class Diagram(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[str] = None
    id: Optional[str] = None
    name: Optional[str] = None
    resolution: Optional[float] = None


class Font(BaseModel):
    class Config:
        extra = Extra.forbid

    isBold: Optional[bool] = None
    isItalic: Optional[bool] = None
    isStrikeThrough: Optional[bool] = None
    isUnderline: Optional[bool] = None
    name: Optional[str] = None
    size: Optional[float] = None


class MessageVisibleKind(Enum):
    initiating = 'initiating'
    non_initiating = 'non_initiating'


class ParticipantBandKind(Enum):
    top_initiating = 'top_initiating'
    middle_initiating = 'middle_initiating'
    bottom_initiating = 'bottom_initiating'
    top_non_initiating = 'top_non_initiating'
    middle_non_initiating = 'middle_non_initiating'
    bottom_non_initiating = 'bottom_non_initiating'


class Point(BaseModel):
    class Config:
        extra = Extra.forbid

    x: float
    y: float


class Style(BaseModel):
    class Config:
        extra = Extra.forbid

    id: str


class Ordering(Enum):
    Parallel = 'Parallel'
    Sequential = 'Sequential'


class LoopType(Enum):
    None_ = 'None'
    Standard = 'Standard'
    MultiInstanceSequential = 'MultiInstanceSequential'
    MultiInstanceParallel = 'MultiInstanceParallel'


class GatewayDirection(Enum):
    Unspecified = 'Unspecified'
    Converging = 'Converging'
    Diverging = 'Diverging'
    Mixed = 'Mixed'


class TDataState(BaseModel):
    class Config:
        extra = Extra.forbid

    name: Optional[str] = None


class TDocumentation(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[str] = None
    textFormat: Optional[str] = None


class EventGatewayType(Enum):
    Exclusive = 'Exclusive'
    Parallel = 'Parallel'


class TExtension(BaseModel):
    class Config:
        extra = Extra.forbid

    definition: Optional[str] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    mustUnderstand: Optional[bool] = None


class TExtensionElements(BaseModel):
    pass

    class Config:
        extra = Extra.forbid


class TFormalExpression(BaseModel):
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    evaluatesToTypeRef: Optional[str] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    language: Optional[str] = None


class TGroup(BaseModel):
    class Config:
        extra = Extra.forbid

    categoryValueRef: Optional[str] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None


class TImport(BaseModel):
    class Config:
        extra = Extra.forbid

    importType: str
    location: str
    namespace: str


class TInputOutputBinding(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    inputDataRef: str
    operationRef: str
    outputDataRef: str


class TInputSet(BaseModel):
    class Config:
        extra = Extra.forbid

    dataInputRefs: Optional[Union[str, List[str]]] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    name: Optional[str] = None
    optionalInputRefs: Optional[Union[str, List[str]]] = None
    outputSetRefs: Optional[Union[str, List[str]]] = None
    whileExecutingInputRefs: Optional[Union[str, List[str]]] = None


class ItemKind(Enum):
    Information = 'Information'
    Physical = 'Physical'


class TItemDefinition(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    isCollection: Optional[bool] = None
    itemKind: Optional[ItemKind] = None
    structureRef: Optional[str] = None


class TLinkEventDefinition(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    name: str
    source: Optional[Union[str, List[str]]] = None
    target: Optional[str] = None


class TMessage(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    itemRef: Optional[str] = None
    name: Optional[str] = None


class TMessageEventDefinition(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    messageRef: Optional[str] = None
    operationRef: Optional[str] = None


class TMessageFlow(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    messageRef: Optional[str] = None
    name: Optional[str] = None
    sourceRef: str
    targetRef: str


class TMessageFlowAssociation(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    innerMessageFlowRef: str
    outerMessageFlowRef: str


class TOperation(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    errorRef: Optional[Union[str, List[str]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    implementationRef: Optional[str] = None
    inMessageRef: str
    name: str
    outMessageRef: Optional[str] = None


class TOutputSet(BaseModel):
    class Config:
        extra = Extra.forbid

    dataOutputRefs: Optional[Union[str, List[str]]] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    inputSetRefs: Optional[Union[str, List[str]]] = None
    name: Optional[str] = None
    optionalOutputRefs: Optional[Union[str, List[str]]] = None
    whileExecutingOutputRefs: Optional[Union[str, List[str]]] = None


class TParticipantAssociation(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    innerParticipantRef: str
    outerParticipantRef: str


class TParticipantMultiplicity(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    maximum: Optional[float] = None
    minimum: Optional[float] = None


class TPartnerEntity(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    name: Optional[str] = None
    participantRef: Optional[List[str]] = None


class TPartnerRole(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    name: Optional[str] = None
    participantRef: Optional[List[str]] = None


class TProperty(BaseModel):
    class Config:
        extra = Extra.forbid

    dataState: Optional[TDataState] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    itemSubjectRef: Optional[str] = None
    name: Optional[str] = None


class Direction(Enum):
    None_ = 'None'
    Forward = 'Forward'
    Backward = 'Backward'
    Both = 'Both'


class TRelationship(BaseModel):
    class Config:
        extra = Extra.forbid

    direction: Optional[Direction] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    source: Union[str, List[str]]
    target: Union[str, List[str]]
    type: str


class TResourceParameter(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    isRequired: Optional[bool] = None
    name: Optional[str] = None
    type: Optional[str] = None


class TScript(BaseModel):
    pass

    class Config:
        extra = Extra.forbid


class TSignal(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    name: Optional[str] = None
    structureRef: Optional[str] = None


class TSignalEventDefinition(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    signalRef: Optional[str] = None


class TText(BaseModel):
    pass

    class Config:
        extra = Extra.forbid


class TTextAnnotation(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    text: Optional[Union[str, TText]] = None
    textFormat: Optional[str] = None


class Method(Enum):
    field_Compensate = '##Compensate'
    field_Image = '##Image'
    field_Store = '##Store'


class TAssociationDirection(Enum):
    None_ = 'None'
    One = 'One'
    Both = 'Both'


class TImplementation(Enum):
    field_unspecified = '##unspecified'
    field_WebService = '##WebService'


class TMultiInstanceFlowCondition(Enum):
    None_ = 'None'
    One = 'One'
    All = 'All'
    Complex = 'Complex'


class TProcessType(Enum):
    None_ = 'None'
    Public = 'Public'
    Private = 'Private'


class BPMNLabel(BaseModel):
    class Config:
        extra = Extra.forbid

    Bounds: Optional[Bounds] = None
    extension: Optional[Union[TExtension, List[TExtension]]] = None
    id: Optional[str] = None
    labelStyle: Optional[str] = None


class BPMNLabelStyle(BaseModel):
    class Config:
        extra = Extra.forbid

    Font: Optional[Union[str, Font, List[Union[str, Font]]]] = None
    id: str


class BPMNShape(BaseModel):
    class Config:
        extra = Extra.forbid

    BPMNLabel: Optional[Union[str, BPMNLabel]] = None
    Bounds: Bounds
    bpmnElement: Optional[str] = None
    choreographyActivityShape: Optional[str] = None
    extension: Optional[Union[TExtension, List[TExtension]]] = None
    id: Optional[str] = None
    isExpanded: Optional[bool] = None
    isHorizontal: Optional[bool] = None
    isMarkerVisible: Optional[bool] = None
    isMessageVisible: Optional[bool] = None
    participantBandKind: Optional[ParticipantBandKind] = None


class DiagramElement(BaseModel):
    class Config:
        extra = Extra.forbid

    extension: Optional[Union[TExtension, List[TExtension]]] = None
    id: Optional[str] = None


class Edge(BaseModel):
    class Config:
        extra = Extra.forbid

    extension: Optional[Union[TExtension, List[TExtension]]] = None
    id: Optional[str] = None
    waypoint: List[Point]


class Label(BaseModel):
    class Config:
        extra = Extra.forbid

    Bounds: Optional[Bounds] = None
    extension: Optional[Union[TExtension, List[TExtension]]] = None
    id: Optional[str] = None


class LabeledEdge(BaseModel):
    __root__: Edge


class Node(BaseModel):
    __root__: DiagramElement


class Shape(BaseModel):
    class Config:
        extra = Extra.forbid

    Bounds: Bounds
    extension: Optional[Union[TExtension, List[TExtension]]] = None
    id: Optional[str] = None


class TAssociation(BaseModel):
    class Config:
        extra = Extra.forbid

    associationDirection: Optional[TAssociationDirection] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    sourceRef: str
    targetRef: str


class TBaseElement(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None


class TBaseElementWithMixedContent(BaseModel):
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None


class TCategoryValue(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    value: Optional[str] = None


class TCompensateEventDefinition(BaseModel):
    class Config:
        extra = Extra.forbid

    activityRef: Optional[str] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    waitForCompletion: Optional[bool] = None


class TConversationAssociation(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    innerConversationNodeRef: str
    outerConversationNodeRef: str


class TConversationLink(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    name: Optional[str] = None
    sourceRef: str
    targetRef: str


class TCorrelationKey(BaseModel):
    class Config:
        extra = Extra.forbid

    correlationPropertyRef: Optional[Union[str, List[str]]] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    name: Optional[str] = None


class TCorrelationPropertyBinding(BaseModel):
    class Config:
        extra = Extra.forbid

    correlationPropertyRef: str
    dataPath: TFormalExpression
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None


class TCorrelationPropertyRetrievalExpression(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    messagePath: TFormalExpression
    messageRef: str


class TCorrelationSubscription(BaseModel):
    class Config:
        extra = Extra.forbid

    correlationKeyRef: str
    correlationPropertyBinding: Optional[
        Union[TCorrelationPropertyBinding, List[TCorrelationPropertyBinding]]
    ] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None


class TDataInput(BaseModel):
    class Config:
        extra = Extra.forbid

    dataState: Optional[TDataState] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    isCollection: Optional[bool] = None
    itemSubjectRef: Optional[str] = None
    name: Optional[str] = None


class TDataOutput(BaseModel):
    class Config:
        extra = Extra.forbid

    dataState: Optional[TDataState] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    isCollection: Optional[bool] = None
    itemSubjectRef: Optional[str] = None
    name: Optional[str] = None


class TDataStore(BaseModel):
    class Config:
        extra = Extra.forbid

    capacity: Optional[float] = None
    dataState: Optional[TDataState] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    isUnlimited: Optional[bool] = None
    itemSubjectRef: Optional[str] = None
    name: Optional[str] = None


class TError(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    errorCode: Optional[str] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    name: Optional[str] = None
    structureRef: Optional[str] = None


class TErrorEventDefinition(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    errorRef: Optional[str] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None


class TEscalation(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    escalationCode: Optional[str] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    name: Optional[str] = None
    structureRef: Optional[str] = None


class TEscalationEventDefinition(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    escalationRef: Optional[str] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None


class TExpression(BaseModel):
    __root__: TBaseElementWithMixedContent


class TInputOutputSpecification(BaseModel):
    class Config:
        extra = Extra.forbid

    dataInput: Optional[Union[TDataInput, List[TDataInput]]] = None
    dataOutput: Optional[Union[TDataOutput, List[TDataOutput]]] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    inputSet: Union[TInputSet, List[TInputSet]]
    outputSet: Union[TOutputSet, List[TOutputSet]]


class TInterface(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    implementationRef: Optional[str] = None
    name: str
    operation: List[TOperation]


class TLoopCharacteristics(BaseModel):
    __root__: TBaseElement


class TMonitoring(BaseModel):
    __root__: TBaseElement


class TParticipant(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    endPointRef: Optional[Union[str, List[str]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    interfaceRef: Optional[Union[str, List[str]]] = None
    name: Optional[str] = None
    participantMultiplicity: Optional[TParticipantMultiplicity] = None
    processRef: Optional[str] = None


class TRendering(BaseModel):
    __root__: TBaseElement


class TResource(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    name: str
    resourceParameter: Optional[List[TResourceParameter]] = None


class TResourceAssignmentExpression(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    expression: TExpression
    extensionElements: Optional[TExtensionElements] = None
    formalExpression: TFormalExpression
    id: Optional[str] = None


class TResourceParameterBinding(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    expression: TExpression
    extensionElements: Optional[TExtensionElements] = None
    formalExpression: TFormalExpression
    id: Optional[str] = None
    parameterRef: str


class TResourceRole(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    name: Optional[str] = None
    resourceAssignmentExpression: Optional[
        Union[TResourceAssignmentExpression, List[TResourceAssignmentExpression]]
    ] = None
    resourceParameterBinding: Optional[
        Union[TResourceParameterBinding, List[TResourceParameterBinding]]
    ] = None
    resourceRef: Optional[str] = None


class TRootElement(BaseModel):
    __root__: TBaseElement


class TStandardLoopCharacteristics(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    loopCondition: Optional[TExpression] = None
    loopMaximum: Optional[float] = None
    testBefore: Optional[bool] = None


class TTimerEventDefinition(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    timeCycle: Optional[TExpression] = None
    timeDate: Optional[TExpression] = None
    timeDuration: Optional[TExpression] = None


class BPMNEdge(BaseModel):
    class Config:
        extra = Extra.forbid

    BPMNLabel: Optional[Union[str, BPMNLabel]] = None
    bpmnElement: Optional[str] = None
    extension: Optional[Union[TExtension, List[TExtension]]] = None
    id: Optional[str] = None
    messageVisibleKind: Optional[MessageVisibleKind] = None
    sourceElement: Optional[str] = None
    targetElement: Optional[str] = None
    waypoint: List[Point]


class BPMNPlane(BaseModel):
    class Config:
        extra = Extra.forbid

    BPMNEdge: Optional[Union[BPMNEdge, List[BPMNEdge]]] = None
    BPMNLabel: Optional[Union[BPMNLabel, List[BPMNLabel]]] = None
    BPMNShape: Optional[Union[BPMNShape, List[BPMNShape]]] = None
    bpmnElement: Optional[str] = None
    extension: Optional[Union[TExtension, List[TExtension]]] = None
    id: Optional[str] = None


class LabeledShape(BaseModel):
    __root__: Shape


class Plane(BaseModel):
    class Config:
        extra = Extra.forbid

    BPMNEdge: Optional[Union[BPMNEdge, List[BPMNEdge]]] = None
    BPMNLabel: Optional[Union[BPMNLabel, List[BPMNLabel]]] = None
    BPMNShape: Optional[Union[BPMNShape, List[BPMNShape]]] = None
    extension: Optional[Union[TExtension, List[TExtension]]] = None
    id: Optional[str] = None


class TArtifact(BaseModel):
    __root__: TBaseElement


class TAssignment(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    from_: TExpression = Field(..., alias='from')
    id: Optional[str] = None
    to: TExpression


class TAuditing(BaseModel):
    __root__: TBaseElement


class TCallChoreography(BaseModel):
    class Config:
        extra = Extra.forbid

    auditing: Optional[TAuditing] = None
    calledChoreographyRef: Optional[str] = None
    categoryValueRef: Optional[Union[str, List[str]]] = None
    correlationKey: Optional[Union[TCorrelationKey, List[TCorrelationKey]]] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    incoming: Optional[Union[str, List[str]]] = None
    initiatingParticipantRef: str
    loopType: Optional[LoopType] = None
    monitoring: Optional[TMonitoring] = None
    name: Optional[str] = None
    outgoing: Optional[Union[str, List[str]]] = None
    participantAssociation: Optional[
        Union[TParticipantAssociation, List[TParticipantAssociation]]
    ] = None
    participantRef: Union[str, List[str]]


class TCallConversation(BaseModel):
    class Config:
        extra = Extra.forbid

    calledCollaborationRef: Optional[str] = None
    correlationKey: Optional[List[TCorrelationKey]] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    messageFlowRef: Optional[Union[str, List[str]]] = None
    name: Optional[str] = None
    participantAssociation: Optional[
        Union[TParticipantAssociation, List[TParticipantAssociation]]
    ] = None
    participantRef: Optional[Union[str, List[str]]] = None


class TCallableElement(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    ioBinding: Optional[List[TInputOutputBinding]] = None
    ioSpecification: Optional[TInputOutputSpecification] = None
    name: Optional[str] = None
    supportedInterfaceRef: Optional[List[str]] = None


class TCategory(BaseModel):
    class Config:
        extra = Extra.forbid

    categoryValue: Optional[Union[TCategoryValue, List[TCategoryValue]]] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    name: Optional[str] = None


class TChoreographyActivity(BaseModel):
    class Config:
        extra = Extra.forbid

    auditing: Optional[TAuditing] = None
    categoryValueRef: Optional[Union[str, List[str]]] = None
    correlationKey: Optional[Union[TCorrelationKey, List[TCorrelationKey]]] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    incoming: Optional[Union[str, List[str]]] = None
    initiatingParticipantRef: str
    loopType: Optional[LoopType] = None
    monitoring: Optional[TMonitoring] = None
    name: Optional[str] = None
    outgoing: Optional[Union[str, List[str]]] = None
    participantRef: Union[str, List[str]]


class TChoreographyTask(BaseModel):
    class Config:
        extra = Extra.forbid

    auditing: Optional[TAuditing] = None
    categoryValueRef: Optional[Union[str, List[str]]] = None
    correlationKey: Optional[Union[TCorrelationKey, List[TCorrelationKey]]] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    incoming: Optional[Union[str, List[str]]] = None
    initiatingParticipantRef: str
    loopType: Optional[LoopType] = None
    messageFlowRef: Union[str, List[str]]
    monitoring: Optional[TMonitoring] = None
    name: Optional[str] = None
    outgoing: Optional[Union[str, List[str]]] = None
    participantRef: Union[str, List[str]]


class TComplexGateway(BaseModel):
    class Config:
        extra = Extra.forbid

    activationCondition: Optional[TExpression] = None
    auditing: Optional[TAuditing] = None
    categoryValueRef: Optional[Union[str, List[str]]] = None
    default: Optional[str] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    gatewayDirection: Optional[GatewayDirection] = None
    id: Optional[str] = None
    incoming: Optional[Union[str, List[str]]] = None
    monitoring: Optional[TMonitoring] = None
    name: Optional[str] = None
    outgoing: Optional[Union[str, List[str]]] = None


class TConditionalEventDefinition(BaseModel):
    class Config:
        extra = Extra.forbid

    condition: Optional[TExpression] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None


class TConversationNode(BaseModel):
    class Config:
        extra = Extra.forbid

    correlationKey: Optional[List[TCorrelationKey]] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    messageFlowRef: Optional[Union[str, List[str]]] = None
    name: Optional[str] = None
    participantRef: Optional[Union[str, List[str]]] = None


class TCorrelationProperty(BaseModel):
    class Config:
        extra = Extra.forbid

    correlationPropertyRetrievalExpression: Union[
        TCorrelationPropertyRetrievalExpression,
        List[TCorrelationPropertyRetrievalExpression],
    ]
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    name: Optional[str] = None
    type: Optional[str] = None


class TDataAssociation(BaseModel):
    class Config:
        extra = Extra.forbid

    assignment: Optional[Union[TAssignment, List[TAssignment]]] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    sourceRef: Optional[Union[str, List[str]]] = None
    targetRef: str
    transformation: Optional[TFormalExpression] = None


class TDataInputAssociation(BaseModel):
    __root__: TDataAssociation


class TDataObject(BaseModel):
    class Config:
        extra = Extra.forbid

    auditing: Optional[TAuditing] = None
    categoryValueRef: Optional[Union[str, List[str]]] = None
    dataState: Optional[TDataState] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    isCollection: Optional[bool] = None
    itemSubjectRef: Optional[str] = None
    monitoring: Optional[TMonitoring] = None
    name: Optional[str] = None


class TDataObjectReference(BaseModel):
    class Config:
        extra = Extra.forbid

    auditing: Optional[TAuditing] = None
    categoryValueRef: Optional[Union[str, List[str]]] = None
    dataObjectRef: Optional[str] = None
    dataState: Optional[TDataState] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    itemSubjectRef: Optional[str] = None
    monitoring: Optional[TMonitoring] = None
    name: Optional[str] = None


class TDataOutputAssociation(BaseModel):
    __root__: TDataAssociation


class TDataStoreReference(BaseModel):
    class Config:
        extra = Extra.forbid

    auditing: Optional[TAuditing] = None
    categoryValueRef: Optional[Union[str, List[str]]] = None
    dataState: Optional[TDataState] = None
    dataStoreRef: Optional[str] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    itemSubjectRef: Optional[str] = None
    monitoring: Optional[TMonitoring] = None
    name: Optional[str] = None


class TEndPoint(BaseModel):
    __root__: TRootElement


class TEvent(BaseModel):
    auditing: Optional[TAuditing] = None
    categoryValueRef: Optional[Union[str, List[str]]] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    incoming: Optional[Union[str, List[str]]] = None
    monitoring: Optional[TMonitoring] = None
    name: Optional[str] = None
    outgoing: Optional[Union[str, List[str]]] = None
    property: Optional[Union[TProperty, List[TProperty]]] = None


class TEventBasedGateway(BaseModel):
    class Config:
        extra = Extra.forbid

    auditing: Optional[TAuditing] = None
    categoryValueRef: Optional[Union[str, List[str]]] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    eventGatewayType: Optional[EventGatewayType] = None
    extensionElements: Optional[TExtensionElements] = None
    gatewayDirection: Optional[GatewayDirection] = None
    id: Optional[str] = None
    incoming: Optional[Union[str, List[str]]] = None
    instantiate: Optional[bool] = None
    monitoring: Optional[TMonitoring] = None
    name: Optional[str] = None
    outgoing: Optional[Union[str, List[str]]] = None


class TEventDefinition(BaseModel):
    __root__: TRootElement


class TExclusiveGateway(BaseModel):
    class Config:
        extra = Extra.forbid

    auditing: Optional[TAuditing] = None
    categoryValueRef: Optional[Union[str, List[str]]] = None
    default: Optional[str] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    gatewayDirection: Optional[GatewayDirection] = None
    id: Optional[str] = None
    incoming: Optional[Union[str, List[str]]] = None
    monitoring: Optional[TMonitoring] = None
    name: Optional[str] = None
    outgoing: Optional[Union[str, List[str]]] = None


class TFlowElement(BaseModel):
    class Config:
        extra = Extra.forbid

    auditing: Optional[TAuditing] = None
    categoryValueRef: Optional[Union[str, List[str]]] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    monitoring: Optional[TMonitoring] = None
    name: Optional[str] = None


class TFlowNode(BaseModel):
    class Config:
        extra = Extra.forbid

    auditing: Optional[TAuditing] = None
    categoryValueRef: Optional[Union[str, List[str]]] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    incoming: Optional[Union[str, List[str]]] = None
    monitoring: Optional[TMonitoring] = None
    name: Optional[str] = None
    outgoing: Optional[Union[str, List[str]]] = None


class TGateway(BaseModel):
    class Config:
        extra = Extra.forbid

    auditing: Optional[TAuditing] = None
    categoryValueRef: Optional[Union[str, List[str]]] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    gatewayDirection: Optional[GatewayDirection] = None
    id: Optional[str] = None
    incoming: Optional[Union[str, List[str]]] = None
    monitoring: Optional[TMonitoring] = None
    name: Optional[str] = None
    outgoing: Optional[Union[str, List[str]]] = None


class TInclusiveGateway(BaseModel):
    class Config:
        extra = Extra.forbid

    auditing: Optional[TAuditing] = None
    categoryValueRef: Optional[Union[str, List[str]]] = None
    default: Optional[str] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    gatewayDirection: Optional[GatewayDirection] = None
    id: Optional[str] = None
    incoming: Optional[Union[str, List[str]]] = None
    monitoring: Optional[TMonitoring] = None
    name: Optional[str] = None
    outgoing: Optional[Union[str, List[str]]] = None


class TParallelGateway(BaseModel):
    __root__: TGateway


class TPerformer(BaseModel):
    __root__: TResourceRole


class TSequenceFlow(BaseModel):
    class Config:
        extra = Extra.forbid

    auditing: Optional[TAuditing] = None
    categoryValueRef: Optional[Union[str, List[str]]] = None
    conditionExpression: Optional[TExpression] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    isImmediate: Optional[bool] = None
    monitoring: Optional[TMonitoring] = None
    name: Optional[str] = None
    sourceRef: str
    targetRef: str


class TTerminateEventDefinition(BaseModel):
    __root__: TEventDefinition


class BPMNDiagram(BaseModel):
    class Config:
        extra = Extra.forbid

    BPMNLabelStyle: Optional[Union[BPMNLabelStyle, List[BPMNLabelStyle]]] = None
    BPMNPlane: BPMNPlane
    documentation: Optional[str] = None
    id: Optional[str] = None
    name: Optional[str] = None
    resolution: Optional[float] = None


class TCancelEventDefinition(BaseModel):
    __root__: TEventDefinition


class TCatchEvent(BaseModel):
    auditing: Optional[TAuditing] = None
    cancelEventDefinition: Optional[
        Union[str, TCancelEventDefinition, List[TCancelEventDefinition]]
    ] = None
    categoryValueRef: Optional[Union[str, List[str]]] = None
    compensateEventDefinition: Optional[
        Union[str, TCompensateEventDefinition, List[TCompensateEventDefinition]]
    ] = None
    conditionalEventDefinition: Optional[
        Union[str, TConditionalEventDefinition, List[TConditionalEventDefinition]]
    ] = None
    dataOutput: Optional[Union[TDataOutput, List[TDataOutput]]] = None
    dataOutputAssociation: Optional[
        Union[TDataOutputAssociation, List[TDataOutputAssociation]]
    ] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    errorEventDefinition: Optional[
        Union[str, TErrorEventDefinition, List[TErrorEventDefinition]]
    ] = None
    escalationEventDefinition: Optional[
        Union[str, TEscalationEventDefinition, List[TEscalationEventDefinition]]
    ] = None
    eventDefinition: Optional[
        Union[str, TEventDefinition, List[TEventDefinition]]
    ] = None
    eventDefinitionRef: Optional[Union[str, List[str]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    incoming: Optional[Union[str, List[str]]] = None
    linkEventDefinition: Optional[
        Union[str, TLinkEventDefinition, List[TLinkEventDefinition]]
    ] = None
    messageEventDefinition: Optional[
        Union[str, TMessageEventDefinition, List[TMessageEventDefinition]]
    ] = None
    monitoring: Optional[TMonitoring] = None
    name: Optional[str] = None
    outgoing: Optional[Union[str, List[str]]] = None
    outputSet: Optional[TOutputSet] = None
    parallelMultiple: Optional[bool] = None
    property: Optional[Union[TProperty, List[TProperty]]] = None
    signalEventDefinition: Optional[
        Union[str, TSignalEventDefinition, List[TSignalEventDefinition]]
    ] = None
    terminateEventDefinition: Optional[
        Union[str, TTerminateEventDefinition, List[TTerminateEventDefinition]]
    ] = None
    timerEventDefinition: Optional[
        Union[str, TTimerEventDefinition, List[TTimerEventDefinition]]
    ] = None


class TConversation(BaseModel):
    __root__: TConversationNode


class THumanPerformer(BaseModel):
    __root__: TPerformer


class TIntermediateCatchEvent(BaseModel):
    __root__: TCatchEvent


class TPotentialOwner(BaseModel):
    __root__: THumanPerformer


class TStartEvent(BaseModel):
    auditing: Optional[TAuditing] = None
    cancelEventDefinition: Optional[
        Union[str, TCancelEventDefinition, List[TCancelEventDefinition]]
    ] = None
    categoryValueRef: Optional[Union[str, List[str]]] = None
    compensateEventDefinition: Optional[
        Union[str, TCompensateEventDefinition, List[TCompensateEventDefinition]]
    ] = None
    conditionalEventDefinition: Optional[
        Union[str, TConditionalEventDefinition, List[TConditionalEventDefinition]]
    ] = None
    dataOutput: Optional[Union[TDataOutput, List[TDataOutput]]] = None
    dataOutputAssociation: Optional[
        Union[TDataOutputAssociation, List[TDataOutputAssociation]]
    ] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    errorEventDefinition: Optional[
        Union[str, TErrorEventDefinition, List[TErrorEventDefinition]]
    ] = None
    escalationEventDefinition: Optional[
        Union[str, TEscalationEventDefinition, List[TEscalationEventDefinition]]
    ] = None
    eventDefinition: Optional[
        Union[str, TEventDefinition, List[TEventDefinition]]
    ] = None
    eventDefinitionRef: Optional[Union[str, List[str]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    incoming: Optional[Union[str, List[str]]] = None
    isInterrupting: Optional[bool] = None
    linkEventDefinition: Optional[
        Union[str, TLinkEventDefinition, List[TLinkEventDefinition]]
    ] = None
    messageEventDefinition: Optional[
        Union[str, TMessageEventDefinition, List[TMessageEventDefinition]]
    ] = None
    monitoring: Optional[TMonitoring] = None
    name: Optional[str] = None
    outgoing: Optional[Union[str, List[str]]] = None
    outputSet: Optional[TOutputSet] = None
    parallelMultiple: Optional[bool] = None
    property: Optional[Union[TProperty, List[TProperty]]] = None
    signalEventDefinition: Optional[
        Union[str, TSignalEventDefinition, List[TSignalEventDefinition]]
    ] = None
    terminateEventDefinition: Optional[
        Union[str, TTerminateEventDefinition, List[TTerminateEventDefinition]]
    ] = None
    timerEventDefinition: Optional[
        Union[str, TTimerEventDefinition, List[TTimerEventDefinition]]
    ] = None


class TSubConversation(BaseModel):
    class Config:
        extra = Extra.forbid

    callConversation: Optional[Union[TCallConversation, List[TCallConversation]]] = None
    conversation: Optional[List[TConversation]] = None
    conversationNode: Optional[Union[TConversationNode, List[TConversationNode]]] = None
    correlationKey: Optional[List[TCorrelationKey]] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    messageFlowRef: Optional[Union[str, List[str]]] = None
    name: Optional[str] = None
    participantRef: Optional[Union[str, List[str]]] = None


class TThrowEvent(BaseModel):
    auditing: Optional[TAuditing] = None
    cancelEventDefinition: Optional[
        Union[str, TCancelEventDefinition, List[Union[str, TCancelEventDefinition]]]
    ] = None
    categoryValueRef: Optional[Union[str, List[str]]] = None
    compensateEventDefinition: Optional[
        Union[
            str,
            TCompensateEventDefinition,
            List[Union[str, TCompensateEventDefinition]],
        ]
    ] = None
    conditionalEventDefinition: Optional[
        Union[
            str,
            TConditionalEventDefinition,
            List[Union[str, TConditionalEventDefinition]],
        ]
    ] = None
    dataInput: Optional[Union[TDataInput, List[TDataInput]]] = None
    dataInputAssociation: Optional[
        Union[TDataInputAssociation, List[TDataInputAssociation]]
    ] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    errorEventDefinition: Optional[
        Union[str, TErrorEventDefinition, List[Union[str, TErrorEventDefinition]]]
    ] = None
    escalationEventDefinition: Optional[
        Union[
            str,
            TEscalationEventDefinition,
            List[Union[str, TEscalationEventDefinition]],
        ]
    ] = None
    eventDefinition: Optional[
        Union[str, TEventDefinition, List[Union[str, TEventDefinition]]]
    ] = None
    eventDefinitionRef: Optional[Union[str, List[str]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    incoming: Optional[Union[str, List[str]]] = None
    inputSet: Optional[TInputSet] = None
    linkEventDefinition: Optional[
        Union[str, TLinkEventDefinition, List[Union[str, TLinkEventDefinition]]]
    ] = None
    messageEventDefinition: Optional[
        Union[str, TMessageEventDefinition, List[Union[str, TMessageEventDefinition]]]
    ] = None
    monitoring: Optional[TMonitoring] = None
    name: Optional[str] = None
    outgoing: Optional[Union[str, List[str]]] = None
    property: Optional[Union[TProperty, List[TProperty]]] = None
    signalEventDefinition: Optional[
        Union[str, TSignalEventDefinition, List[Union[str, TSignalEventDefinition]]]
    ] = None
    terminateEventDefinition: Optional[
        Union[
            str, TTerminateEventDefinition, List[Union[str, TTerminateEventDefinition]]
        ]
    ] = None
    timerEventDefinition: Optional[
        Union[str, TTimerEventDefinition, List[Union[str, TTimerEventDefinition]]]
    ] = None


class TBoundaryEvent(BaseModel):
    attachedToRef: str
    auditing: Optional[TAuditing] = None
    cancelActivity: Optional[bool] = None
    cancelEventDefinition: Optional[
        Union[str, TCancelEventDefinition, List[TCancelEventDefinition]]
    ] = None
    categoryValueRef: Optional[Union[str, List[str]]] = None
    compensateEventDefinition: Optional[
        Union[str, TCompensateEventDefinition, List[TCompensateEventDefinition]]
    ] = None
    conditionalEventDefinition: Optional[
        Union[str, TConditionalEventDefinition, List[TConditionalEventDefinition]]
    ] = None
    dataOutput: Optional[Union[TDataOutput, List[TDataOutput]]] = None
    dataOutputAssociation: Optional[
        Union[TDataOutputAssociation, List[TDataOutputAssociation]]
    ] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    errorEventDefinition: Optional[
        Union[str, TErrorEventDefinition, List[TErrorEventDefinition]]
    ] = None
    escalationEventDefinition: Optional[
        Union[str, TEscalationEventDefinition, List[TEscalationEventDefinition]]
    ] = None
    eventDefinition: Optional[
        Union[str, TEventDefinition, List[TEventDefinition]]
    ] = None
    eventDefinitionRef: Optional[Union[str, List[str]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    incoming: Optional[Union[str, List[str]]] = None
    linkEventDefinition: Optional[
        Union[str, TLinkEventDefinition, List[TLinkEventDefinition]]
    ] = None
    messageEventDefinition: Optional[
        Union[str, TMessageEventDefinition, List[TMessageEventDefinition]]
    ] = None
    monitoring: Optional[TMonitoring] = None
    name: Optional[str] = None
    outgoing: Optional[Union[str, List[str]]] = None
    outputSet: Optional[TOutputSet] = None
    parallelMultiple: Optional[bool] = None
    property: Optional[Union[TProperty, List[TProperty]]] = None
    signalEventDefinition: Optional[
        Union[str, TSignalEventDefinition, List[TSignalEventDefinition]]
    ] = None
    terminateEventDefinition: Optional[
        Union[str, TTerminateEventDefinition, List[TTerminateEventDefinition]]
    ] = None
    timerEventDefinition: Optional[
        Union[str, TTimerEventDefinition, List[TTimerEventDefinition]]
    ] = None


class TCollaboration(BaseModel):
    class Config:
        extra = Extra.forbid

    artifact: Optional[Union[TArtifact, List[TArtifact]]] = None
    association: Optional[Union[TAssociation, List[TAssociation]]] = None
    callConversation: Optional[Union[TCallConversation, List[TCallConversation]]] = None
    choreographyRef: Optional[Union[str, List[str]]] = None
    conversation: Optional[Union[TConversation, List[TConversation]]] = None
    conversationAssociation: Optional[
        Union[TConversationAssociation, List[TConversationAssociation]]
    ] = None
    conversationLink: Optional[Union[TConversationLink, List[TConversationLink]]] = None
    conversationNode: Optional[Union[TConversationNode, List[TConversationNode]]] = None
    correlationKey: Optional[Union[TCorrelationKey, List[TCorrelationKey]]] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    group: Optional[Union[TGroup, List[TGroup]]] = None
    id: Optional[str] = None
    isClosed: Optional[bool] = None
    messageFlow: Optional[Union[TMessageFlow, List[TMessageFlow]]] = None
    messageFlowAssociation: Optional[
        Union[TMessageFlowAssociation, List[TMessageFlowAssociation]]
    ] = None
    name: Optional[str] = None
    participant: Optional[Union[TParticipant, List[TParticipant]]] = None
    participantAssociation: Optional[
        Union[TParticipantAssociation, List[TParticipantAssociation]]
    ] = None
    subConversation: Optional[Union[TSubConversation, List[TSubConversation]]] = None
    textAnnotation: Optional[Union[TTextAnnotation, List[TTextAnnotation]]] = None


class TEndEvent(BaseModel):
    __root__: TThrowEvent


class TGlobalBusinessRuleTask(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    humanPerformer: Optional[Union[THumanPerformer, List[THumanPerformer]]] = None
    id: Optional[str] = None
    implementation: Optional[TImplementation] = None
    ioBinding: Optional[List[TInputOutputBinding]] = None
    ioSpecification: Optional[TInputOutputSpecification] = None
    name: Optional[str] = None
    performer: Optional[Union[TPerformer, List[TPerformer]]] = None
    potentialOwner: Optional[Union[TPotentialOwner, List[TPotentialOwner]]] = None
    resourceRole: Optional[Union[TResourceRole, List[TResourceRole]]] = None
    supportedInterfaceRef: Optional[List[str]] = None


class TGlobalConversation(BaseModel):
    __root__: TCollaboration


class TGlobalScriptTask(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    humanPerformer: Optional[Union[THumanPerformer, List[THumanPerformer]]] = None
    id: Optional[str] = None
    ioBinding: Optional[List[TInputOutputBinding]] = None
    ioSpecification: Optional[TInputOutputSpecification] = None
    name: Optional[str] = None
    performer: Optional[Union[TPerformer, List[TPerformer]]] = None
    potentialOwner: Optional[Union[TPotentialOwner, List[TPotentialOwner]]] = None
    resourceRole: Optional[Union[TResourceRole, List[TResourceRole]]] = None
    script: Optional[TScript] = None
    scriptLanguage: Optional[str] = None
    supportedInterfaceRef: Optional[List[str]] = None


class TGlobalTask(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    humanPerformer: Optional[Union[THumanPerformer, List[THumanPerformer]]] = None
    id: Optional[str] = None
    ioBinding: Optional[List[TInputOutputBinding]] = None
    ioSpecification: Optional[TInputOutputSpecification] = None
    name: Optional[str] = None
    performer: Optional[Union[TPerformer, List[TPerformer]]] = None
    potentialOwner: Optional[Union[TPotentialOwner, List[TPotentialOwner]]] = None
    resourceRole: Optional[Union[TResourceRole, List[TResourceRole]]] = None
    supportedInterfaceRef: Optional[List[str]] = None


class TGlobalUserTask(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    humanPerformer: Optional[Union[THumanPerformer, List[THumanPerformer]]] = None
    id: Optional[str] = None
    implementation: Optional[TImplementation] = None
    ioBinding: Optional[List[TInputOutputBinding]] = None
    ioSpecification: Optional[TInputOutputSpecification] = None
    name: Optional[str] = None
    performer: Optional[Union[TPerformer, List[TPerformer]]] = None
    potentialOwner: Optional[Union[TPotentialOwner, List[TPotentialOwner]]] = None
    rendering: Optional[Union[TRendering, List[TRendering]]] = None
    resourceRole: Optional[Union[TResourceRole, List[TResourceRole]]] = None
    supportedInterfaceRef: Optional[List[str]] = None


class TImplicitThrowEvent(BaseModel):
    __root__: TThrowEvent


class TIntermediateThrowEvent(BaseModel):
    __root__: TThrowEvent


class TComplexBehaviorDefinition(BaseModel):
    class Config:
        extra = Extra.forbid

    condition: TFormalExpression
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    event: Optional[TImplicitThrowEvent] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None


class TGlobalManualTask(BaseModel):
    __root__: TGlobalTask


class TMultiInstanceLoopCharacteristics(BaseModel):
    class Config:
        extra = Extra.forbid

    behavior: Optional[TMultiInstanceFlowCondition] = None
    completionCondition: Optional[TExpression] = None
    complexBehaviorDefinition: Optional[
        Union[TComplexBehaviorDefinition, List[TComplexBehaviorDefinition]]
    ] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    inputDataItem: Optional[TDataInput] = None
    isSequential: Optional[bool] = None
    loopCardinality: Optional[TExpression] = None
    loopDataInputRef: Optional[str] = None
    loopDataOutputRef: Optional[str] = None
    noneBehaviorEventRef: Optional[str] = None
    oneBehaviorEventRef: Optional[str] = None
    outputDataItem: Optional[TDataOutput] = None


class TReceiveTask(BaseModel):
    class Config:
        extra = Extra.forbid

    auditing: Optional[TAuditing] = None
    categoryValueRef: Optional[Union[str, List[str]]] = None
    completionQuantity: Optional[float] = None
    dataInputAssociation: Optional[
        Union[TDataInputAssociation, List[TDataInputAssociation]]
    ] = None
    dataOutputAssociation: Optional[
        Union[TDataOutputAssociation, List[TDataOutputAssociation]]
    ] = None
    default: Optional[str] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    humanPerformer: Optional[Union[THumanPerformer, List[THumanPerformer]]] = None
    id: Optional[str] = None
    implementation: Optional[TImplementation] = None
    incoming: Optional[Union[str, List[str]]] = None
    instantiate: Optional[bool] = None
    ioSpecification: Optional[TInputOutputSpecification] = None
    isForCompensation: Optional[bool] = None
    loopCharacteristics: Optional[
        Union[str, TLoopCharacteristics, List[Union[str, TLoopCharacteristics]]]
    ] = None
    messageRef: Optional[str] = None
    monitoring: Optional[TMonitoring] = None
    multiInstanceLoopCharacteristics: Optional[
        Union[
            str,
            TMultiInstanceLoopCharacteristics,
            List[Union[str, TMultiInstanceLoopCharacteristics]],
        ]
    ] = None
    name: Optional[str] = None
    operationRef: Optional[str] = None
    outgoing: Optional[Union[str, List[str]]] = None
    performer: Optional[Union[TPerformer, List[TPerformer]]] = None
    potentialOwner: Optional[Union[TPotentialOwner, List[TPotentialOwner]]] = None
    property: Optional[Union[TProperty, List[TProperty]]] = None
    resourceRole: Optional[Union[TResourceRole, List[TResourceRole]]] = None
    standardLoopCharacteristics: Optional[
        Union[
            str,
            TStandardLoopCharacteristics,
            List[Union[str, TStandardLoopCharacteristics]],
        ]
    ] = None
    startQuantity: Optional[float] = None


class TScriptTask(BaseModel):
    class Config:
        extra = Extra.forbid

    auditing: Optional[TAuditing] = None
    categoryValueRef: Optional[Union[str, List[str]]] = None
    completionQuantity: Optional[float] = None
    dataInputAssociation: Optional[
        Union[TDataInputAssociation, List[TDataInputAssociation]]
    ] = None
    dataOutputAssociation: Optional[
        Union[TDataOutputAssociation, List[TDataOutputAssociation]]
    ] = None
    default: Optional[str] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    humanPerformer: Optional[Union[THumanPerformer, List[THumanPerformer]]] = None
    id: Optional[str] = None
    incoming: Optional[Union[str, List[str]]] = None
    ioSpecification: Optional[TInputOutputSpecification] = None
    isForCompensation: Optional[bool] = None
    loopCharacteristics: Optional[
        Union[str, TLoopCharacteristics, List[Union[str, TLoopCharacteristics]]]
    ] = None
    monitoring: Optional[TMonitoring] = None
    multiInstanceLoopCharacteristics: Optional[
        Union[
            str,
            TMultiInstanceLoopCharacteristics,
            List[Union[str, TMultiInstanceLoopCharacteristics]],
        ]
    ] = None
    name: Optional[str] = None
    outgoing: Optional[Union[str, List[str]]] = None
    performer: Optional[Union[TPerformer, List[TPerformer]]] = None
    potentialOwner: Optional[Union[TPotentialOwner, List[TPotentialOwner]]] = None
    property: Optional[Union[TProperty, List[TProperty]]] = None
    resourceRole: Optional[Union[TResourceRole, List[TResourceRole]]] = None
    script: Optional[TScript] = None
    scriptFormat: Optional[str] = None
    standardLoopCharacteristics: Optional[
        Union[
            str,
            TStandardLoopCharacteristics,
            List[Union[str, TStandardLoopCharacteristics]],
        ]
    ] = None
    startQuantity: Optional[float] = None


class TSendTask(BaseModel):
    class Config:
        extra = Extra.forbid

    auditing: Optional[TAuditing] = None
    categoryValueRef: Optional[Union[str, List[str]]] = None
    completionQuantity: Optional[float] = None
    dataInputAssociation: Optional[
        Union[TDataInputAssociation, List[TDataInputAssociation]]
    ] = None
    dataOutputAssociation: Optional[
        Union[TDataOutputAssociation, List[TDataOutputAssociation]]
    ] = None
    default: Optional[str] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    humanPerformer: Optional[Union[THumanPerformer, List[THumanPerformer]]] = None
    id: Optional[str] = None
    implementation: Optional[TImplementation] = None
    incoming: Optional[Union[str, List[str]]] = None
    ioSpecification: Optional[TInputOutputSpecification] = None
    isForCompensation: Optional[bool] = None
    loopCharacteristics: Optional[
        Union[str, TLoopCharacteristics, List[Union[str, TLoopCharacteristics]]]
    ] = None
    messageRef: Optional[str] = None
    monitoring: Optional[TMonitoring] = None
    multiInstanceLoopCharacteristics: Optional[
        Union[
            str,
            TMultiInstanceLoopCharacteristics,
            List[Union[str, TMultiInstanceLoopCharacteristics]],
        ]
    ] = None
    name: Optional[str] = None
    operationRef: Optional[str] = None
    outgoing: Optional[Union[str, List[str]]] = None
    performer: Optional[Union[TPerformer, List[TPerformer]]] = None
    potentialOwner: Optional[Union[TPotentialOwner, List[TPotentialOwner]]] = None
    property: Optional[Union[TProperty, List[TProperty]]] = None
    resourceRole: Optional[Union[TResourceRole, List[TResourceRole]]] = None
    standardLoopCharacteristics: Optional[
        Union[
            str,
            TStandardLoopCharacteristics,
            List[Union[str, TStandardLoopCharacteristics]],
        ]
    ] = None
    startQuantity: Optional[float] = None


class TServiceTask(BaseModel):
    class Config:
        extra = Extra.forbid

    auditing: Optional[TAuditing] = None
    categoryValueRef: Optional[Union[str, List[str]]] = None
    completionQuantity: Optional[float] = None
    dataInputAssociation: Optional[
        Union[TDataInputAssociation, List[TDataInputAssociation]]
    ] = None
    dataOutputAssociation: Optional[
        Union[TDataOutputAssociation, List[TDataOutputAssociation]]
    ] = None
    default: Optional[str] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    humanPerformer: Optional[Union[THumanPerformer, List[THumanPerformer]]] = None
    id: Optional[str] = None
    implementation: Optional[TImplementation] = None
    incoming: Optional[Union[str, List[str]]] = None
    ioSpecification: Optional[TInputOutputSpecification] = None
    isForCompensation: Optional[bool] = None
    loopCharacteristics: Optional[
        Union[str, TLoopCharacteristics, List[Union[str, TLoopCharacteristics]]]
    ] = None
    monitoring: Optional[TMonitoring] = None
    multiInstanceLoopCharacteristics: Optional[
        Union[
            str,
            TMultiInstanceLoopCharacteristics,
            List[Union[str, TMultiInstanceLoopCharacteristics]],
        ]
    ] = None
    name: Optional[str] = None
    operationRef: Optional[str] = None
    outgoing: Optional[Union[str, List[str]]] = None
    performer: Optional[Union[TPerformer, List[TPerformer]]] = None
    potentialOwner: Optional[Union[TPotentialOwner, List[TPotentialOwner]]] = None
    property: Optional[Union[TProperty, List[TProperty]]] = None
    resourceRole: Optional[Union[TResourceRole, List[TResourceRole]]] = None
    standardLoopCharacteristics: Optional[
        Union[
            str,
            TStandardLoopCharacteristics,
            List[Union[str, TStandardLoopCharacteristics]],
        ]
    ] = None
    startQuantity: Optional[float] = None


class TUserTask(BaseModel):
    class Config:
        extra = Extra.forbid

    auditing: Optional[TAuditing] = None
    categoryValueRef: Optional[Union[str, List[str]]] = None
    completionQuantity: Optional[float] = None
    dataInputAssociation: Optional[
        Union[TDataInputAssociation, List[TDataInputAssociation]]
    ] = None
    dataOutputAssociation: Optional[
        Union[TDataOutputAssociation, List[TDataOutputAssociation]]
    ] = None
    default: Optional[str] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    humanPerformer: Optional[Union[THumanPerformer, List[THumanPerformer]]] = None
    id: Optional[str] = None
    implementation: Optional[TImplementation] = None
    incoming: Optional[Union[str, List[str]]] = None
    ioSpecification: Optional[TInputOutputSpecification] = None
    isForCompensation: Optional[bool] = None
    loopCharacteristics: Optional[
        Union[str, TLoopCharacteristics, List[Union[str, TLoopCharacteristics]]]
    ] = None
    monitoring: Optional[TMonitoring] = None
    multiInstanceLoopCharacteristics: Optional[
        Union[
            str,
            TMultiInstanceLoopCharacteristics,
            List[Union[str, TMultiInstanceLoopCharacteristics]],
        ]
    ] = None
    name: Optional[str] = None
    outgoing: Optional[Union[str, List[str]]] = None
    performer: Optional[Union[TPerformer, List[TPerformer]]] = None
    potentialOwner: Optional[Union[TPotentialOwner, List[TPotentialOwner]]] = None
    property: Optional[Union[TProperty, List[TProperty]]] = None
    rendering: Optional[Union[TRendering, List[TRendering]]] = None
    resourceRole: Optional[Union[TResourceRole, List[TResourceRole]]] = None
    standardLoopCharacteristics: Optional[
        Union[
            str,
            TStandardLoopCharacteristics,
            List[Union[str, TStandardLoopCharacteristics]],
        ]
    ] = None
    startQuantity: Optional[float] = None


class TActivity(BaseModel):
    class Config:
        extra = Extra.forbid

    auditing: Optional[TAuditing] = None
    categoryValueRef: Optional[Union[str, List[str]]] = None
    completionQuantity: Optional[float] = None
    dataInputAssociation: Optional[
        Union[TDataInputAssociation, List[TDataInputAssociation]]
    ] = None
    dataOutputAssociation: Optional[
        Union[TDataOutputAssociation, List[TDataOutputAssociation]]
    ] = None
    default: Optional[str] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    humanPerformer: Optional[Union[THumanPerformer, List[THumanPerformer]]] = None
    id: Optional[str] = None
    incoming: Optional[Union[str, List[str]]] = None
    ioSpecification: Optional[TInputOutputSpecification] = None
    isForCompensation: Optional[bool] = None
    loopCharacteristics: Optional[
        Union[str, TLoopCharacteristics, List[Union[str, TLoopCharacteristics]]]
    ] = None
    monitoring: Optional[TMonitoring] = None
    multiInstanceLoopCharacteristics: Optional[
        Union[
            str,
            TMultiInstanceLoopCharacteristics,
            List[Union[str, TMultiInstanceLoopCharacteristics]],
        ]
    ] = None
    name: Optional[str] = None
    outgoing: Optional[Union[str, List[str]]] = None
    performer: Optional[Union[TPerformer, List[TPerformer]]] = None
    potentialOwner: Optional[Union[TPotentialOwner, List[TPotentialOwner]]] = None
    property: Optional[Union[TProperty, List[TProperty]]] = None
    resourceRole: Optional[Union[TResourceRole, List[TResourceRole]]] = None
    standardLoopCharacteristics: Optional[
        Union[
            str,
            TStandardLoopCharacteristics,
            List[Union[str, TStandardLoopCharacteristics]],
        ]
    ] = None
    startQuantity: Optional[float] = None


class TBusinessRuleTask(BaseModel):
    class Config:
        extra = Extra.forbid

    auditing: Optional[TAuditing] = None
    categoryValueRef: Optional[Union[str, List[str]]] = None
    completionQuantity: Optional[float] = None
    dataInputAssociation: Optional[
        Union[TDataInputAssociation, List[TDataInputAssociation]]
    ] = None
    dataOutputAssociation: Optional[
        Union[TDataOutputAssociation, List[TDataOutputAssociation]]
    ] = None
    default: Optional[str] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    humanPerformer: Optional[Union[THumanPerformer, List[THumanPerformer]]] = None
    id: Optional[str] = None
    implementation: Optional[TImplementation] = None
    incoming: Optional[Union[str, List[str]]] = None
    ioSpecification: Optional[TInputOutputSpecification] = None
    isForCompensation: Optional[bool] = None
    loopCharacteristics: Optional[
        Union[str, TLoopCharacteristics, List[Union[str, TLoopCharacteristics]]]
    ] = None
    monitoring: Optional[TMonitoring] = None
    multiInstanceLoopCharacteristics: Optional[
        Union[
            str,
            TMultiInstanceLoopCharacteristics,
            List[Union[str, TMultiInstanceLoopCharacteristics]],
        ]
    ] = None
    name: Optional[str] = None
    outgoing: Optional[Union[str, List[str]]] = None
    performer: Optional[Union[TPerformer, List[TPerformer]]] = None
    potentialOwner: Optional[Union[TPotentialOwner, List[TPotentialOwner]]] = None
    property: Optional[Union[TProperty, List[TProperty]]] = None
    resourceRole: Optional[Union[TResourceRole, List[TResourceRole]]] = None
    standardLoopCharacteristics: Optional[
        Union[
            str,
            TStandardLoopCharacteristics,
            List[Union[str, TStandardLoopCharacteristics]],
        ]
    ] = None
    startQuantity: Optional[float] = None


class TCallActivity(BaseModel):
    class Config:
        extra = Extra.forbid

    auditing: Optional[TAuditing] = None
    calledElement: Optional[str] = None
    categoryValueRef: Optional[Union[str, List[str]]] = None
    completionQuantity: Optional[float] = None
    dataInputAssociation: Optional[
        Union[TDataInputAssociation, List[TDataInputAssociation]]
    ] = None
    dataOutputAssociation: Optional[
        Union[TDataOutputAssociation, List[TDataOutputAssociation]]
    ] = None
    default: Optional[str] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    humanPerformer: Optional[Union[THumanPerformer, List[THumanPerformer]]] = None
    id: Optional[str] = None
    incoming: Optional[Union[str, List[str]]] = None
    ioSpecification: Optional[TInputOutputSpecification] = None
    isForCompensation: Optional[bool] = None
    loopCharacteristics: Optional[
        Union[str, TLoopCharacteristics, List[Union[str, TLoopCharacteristics]]]
    ] = None
    monitoring: Optional[TMonitoring] = None
    multiInstanceLoopCharacteristics: Optional[
        Union[
            str,
            TMultiInstanceLoopCharacteristics,
            List[Union[str, TMultiInstanceLoopCharacteristics]],
        ]
    ] = None
    name: Optional[str] = None
    outgoing: Optional[Union[str, List[str]]] = None
    performer: Optional[Union[TPerformer, List[TPerformer]]] = None
    potentialOwner: Optional[Union[TPotentialOwner, List[TPotentialOwner]]] = None
    property: Optional[Union[TProperty, List[TProperty]]] = None
    resourceRole: Optional[Union[TResourceRole, List[TResourceRole]]] = None
    standardLoopCharacteristics: Optional[
        Union[
            str,
            TStandardLoopCharacteristics,
            List[Union[str, TStandardLoopCharacteristics]],
        ]
    ] = None
    startQuantity: Optional[float] = None


class TTask(BaseModel):
    __root__: TActivity


class TManualTask(BaseModel):
    __root__: TTask


class BpmnJsonModel(BaseModel):
    class Config:
        extra = Extra.forbid

    definitions: TDefinitions


class TAdHocSubProcess(BaseModel):
    adHocSubProcess: Optional[Union[TAdHocSubProcess, List[TAdHocSubProcess]]] = None
    artifact: Optional[Union[TArtifact, List[TArtifact]]] = None
    association: Optional[Union[TAssociation, List[TAssociation]]] = None
    auditing: Optional[TAuditing] = None
    boundaryEvent: Optional[Union[TBoundaryEvent, List[TBoundaryEvent]]] = None
    businessRuleTask: Optional[Union[TBusinessRuleTask, List[TBusinessRuleTask]]] = None
    callActivity: Optional[Union[TCallActivity, List[TCallActivity]]] = None
    callChoreography: Optional[Union[TCallChoreography, List[TCallChoreography]]] = None
    cancelRemainingInstances: Optional[bool] = None
    categoryValueRef: Optional[Union[str, List[str]]] = None
    choreographyTask: Optional[Union[TChoreographyTask, List[TChoreographyTask]]] = None
    completionCondition: Optional[TExpression] = None
    completionQuantity: Optional[float] = None
    complexGateway: Optional[Union[TComplexGateway, List[TComplexGateway]]] = None
    dataInputAssociation: Optional[
        Union[TDataInputAssociation, List[TDataInputAssociation]]
    ] = None
    dataObject: Optional[Union[TDataObject, List[TDataObject]]] = None
    dataObjectReference: Optional[
        Union[TDataObjectReference, List[TDataObjectReference]]
    ] = None
    dataOutputAssociation: Optional[
        Union[TDataOutputAssociation, List[TDataOutputAssociation]]
    ] = None
    dataStoreReference: Optional[
        Union[TDataStoreReference, List[TDataStoreReference]]
    ] = None
    default: Optional[str] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    endEvent: Optional[Union[TEndEvent, List[TEndEvent]]] = None
    event: Optional[Union[TEvent, List[TEvent]]] = None
    eventBasedGateway: Optional[
        Union[TEventBasedGateway, List[TEventBasedGateway]]
    ] = None
    exclusiveGateway: Optional[Union[TExclusiveGateway, List[TExclusiveGateway]]] = None
    extensionElements: Optional[TExtensionElements] = None
    flowElement: Optional[Union[TFlowElement, List[TFlowElement]]] = None
    group: Optional[Union[TGroup, List[TGroup]]] = None
    humanPerformer: Optional[Union[THumanPerformer, List[THumanPerformer]]] = None
    id: Optional[str] = None
    implicitThrowEvent: Optional[
        Union[TImplicitThrowEvent, List[TImplicitThrowEvent]]
    ] = None
    inclusiveGateway: Optional[Union[TInclusiveGateway, List[TInclusiveGateway]]] = None
    incoming: Optional[Union[str, List[str]]] = None
    intermediateCatchEvent: Optional[
        Union[TIntermediateCatchEvent, List[TIntermediateCatchEvent]]
    ] = None
    intermediateThrowEvent: Optional[
        Union[TIntermediateThrowEvent, List[TIntermediateThrowEvent]]
    ] = None
    ioSpecification: Optional[TInputOutputSpecification] = None
    isForCompensation: Optional[bool] = None
    laneSet: Optional[Union[TLaneSet, List[TLaneSet]]] = None
    loopCharacteristics: Optional[
        Union[str, TLoopCharacteristics, List[Union[str, TLoopCharacteristics]]]
    ] = None
    manualTask: Optional[Union[TManualTask, List[TManualTask]]] = None
    monitoring: Optional[TMonitoring] = None
    multiInstanceLoopCharacteristics: Optional[
        Union[
            str,
            TMultiInstanceLoopCharacteristics,
            List[Union[str, TMultiInstanceLoopCharacteristics]],
        ]
    ] = None
    name: Optional[str] = None
    ordering: Optional[Ordering] = None
    outgoing: Optional[Union[str, List[str]]] = None
    parallelGateway: Optional[Union[TParallelGateway, List[TParallelGateway]]] = None
    performer: Optional[Union[TPerformer, List[TPerformer]]] = None
    potentialOwner: Optional[Union[TPotentialOwner, List[TPotentialOwner]]] = None
    property: Optional[Union[TProperty, List[TProperty]]] = None
    receiveTask: Optional[Union[TReceiveTask, List[TReceiveTask]]] = None
    resourceRole: Optional[Union[TResourceRole, List[TResourceRole]]] = None
    scriptTask: Optional[Union[TScriptTask, List[TScriptTask]]] = None
    sendTask: Optional[Union[TSendTask, List[TSendTask]]] = None
    sequenceFlow: Optional[Union[TSequenceFlow, List[TSequenceFlow]]] = None
    serviceTask: Optional[Union[TServiceTask, List[TServiceTask]]] = None
    standardLoopCharacteristics: Optional[
        Union[
            str,
            TStandardLoopCharacteristics,
            List[Union[str, TStandardLoopCharacteristics]],
        ]
    ] = None
    startEvent: Optional[Union[TStartEvent, List[TStartEvent]]] = None
    startQuantity: Optional[float] = None
    subChoreography: Optional[Union[TSubChoreography, List[TSubChoreography]]] = None
    subProcess: Optional[Union[TSubProcess, List[TSubProcess]]] = None
    task: Optional[Union[TTask, List[TTask]]] = None
    textAnnotation: Optional[Union[TTextAnnotation, List[TTextAnnotation]]] = None
    transaction: Optional[Union[TTransaction, List[TTransaction]]] = None
    triggeredByEvent: Optional[bool] = None
    userTask: Optional[Union[TUserTask, List[TUserTask]]] = None


class TChoreography(BaseModel):
    class Config:
        extra = Extra.forbid

    adHocSubProcess: Optional[Union[TAdHocSubProcess, List[TAdHocSubProcess]]] = None
    artifact: Optional[Union[TArtifact, List[TArtifact]]] = None
    association: Optional[Union[TAssociation, List[TAssociation]]] = None
    boundaryEvent: Optional[Union[TBoundaryEvent, List[TBoundaryEvent]]] = None
    businessRuleTask: Optional[Union[TBusinessRuleTask, List[TBusinessRuleTask]]] = None
    callActivity: Optional[Union[TCallActivity, List[TCallActivity]]] = None
    callChoreography: Optional[Union[TCallChoreography, List[TCallChoreography]]] = None
    callConversation: Optional[Union[TCallConversation, List[TCallConversation]]] = None
    choreographyRef: Optional[Union[str, List[str]]] = None
    choreographyTask: Optional[Union[TChoreographyTask, List[TChoreographyTask]]] = None
    complexGateway: Optional[Union[TComplexGateway, List[TComplexGateway]]] = None
    conversation: Optional[Union[TConversation, List[TConversation]]] = None
    conversationAssociation: Optional[
        Union[TConversationAssociation, List[TConversationAssociation]]
    ] = None
    conversationLink: Optional[Union[TConversationLink, List[TConversationLink]]] = None
    conversationNode: Optional[Union[TConversationNode, List[TConversationNode]]] = None
    correlationKey: Optional[Union[TCorrelationKey, List[TCorrelationKey]]] = None
    dataObject: Optional[Union[TDataObject, List[TDataObject]]] = None
    dataObjectReference: Optional[
        Union[TDataObjectReference, List[TDataObjectReference]]
    ] = None
    dataStoreReference: Optional[
        Union[TDataStoreReference, List[TDataStoreReference]]
    ] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    endEvent: Optional[Union[TEndEvent, List[TEndEvent]]] = None
    event: Optional[Union[TEvent, List[TEvent]]] = None
    eventBasedGateway: Optional[
        Union[TEventBasedGateway, List[TEventBasedGateway]]
    ] = None
    exclusiveGateway: Optional[Union[TExclusiveGateway, List[TExclusiveGateway]]] = None
    extensionElements: Optional[TExtensionElements] = None
    flowElement: Optional[Union[TFlowElement, List[TFlowElement]]] = None
    group: Optional[Union[TGroup, List[TGroup]]] = None
    id: Optional[str] = None
    implicitThrowEvent: Optional[
        Union[TImplicitThrowEvent, List[TImplicitThrowEvent]]
    ] = None
    inclusiveGateway: Optional[Union[TInclusiveGateway, List[TInclusiveGateway]]] = None
    intermediateCatchEvent: Optional[
        Union[TIntermediateCatchEvent, List[TIntermediateCatchEvent]]
    ] = None
    intermediateThrowEvent: Optional[
        Union[TIntermediateThrowEvent, List[TIntermediateThrowEvent]]
    ] = None
    isClosed: Optional[bool] = None
    manualTask: Optional[Union[TManualTask, List[TManualTask]]] = None
    messageFlow: Optional[Union[TMessageFlow, List[TMessageFlow]]] = None
    messageFlowAssociation: Optional[
        Union[TMessageFlowAssociation, List[TMessageFlowAssociation]]
    ] = None
    name: Optional[str] = None
    parallelGateway: Optional[Union[TParallelGateway, List[TParallelGateway]]] = None
    participant: Optional[Union[TParticipant, List[TParticipant]]] = None
    participantAssociation: Optional[
        Union[TParticipantAssociation, List[TParticipantAssociation]]
    ] = None
    receiveTask: Optional[Union[TReceiveTask, List[TReceiveTask]]] = None
    scriptTask: Optional[Union[TScriptTask, List[TScriptTask]]] = None
    sendTask: Optional[Union[TSendTask, List[TSendTask]]] = None
    sequenceFlow: Optional[Union[TSequenceFlow, List[TSequenceFlow]]] = None
    serviceTask: Optional[Union[TServiceTask, List[TServiceTask]]] = None
    startEvent: Optional[Union[TStartEvent, List[TStartEvent]]] = None
    subChoreography: Optional[Union[TSubChoreography, List[TSubChoreography]]] = None
    subConversation: Optional[Union[TSubConversation, List[TSubConversation]]] = None
    subProcess: Optional[Union[TSubProcess, List[TSubProcess]]] = None
    task: Optional[Union[TTask, List[TTask]]] = None
    textAnnotation: Optional[Union[TTextAnnotation, List[TTextAnnotation]]] = None
    transaction: Optional[Union[TTransaction, List[TTransaction]]] = None
    userTask: Optional[Union[TUserTask, List[TUserTask]]] = None


class TDefinitions(BaseModel):
    BPMNDiagram: Optional[Union[BPMNDiagram, List[BPMNDiagram]]] = None
    cancelEventDefinition: Optional[
        Union[str, TCancelEventDefinition, List[Union[str, TCancelEventDefinition]]]
    ] = None
    category: Optional[Union[TCategory, List[TCategory]]] = None
    choreography: Optional[Union[TChoreography, List[TChoreography]]] = None
    collaboration: Optional[
        Union[str, TCollaboration, List[Union[str, TCollaboration]]]
    ] = None
    compensateEventDefinition: Optional[
        Union[
            str,
            TCompensateEventDefinition,
            List[Union[str, TCompensateEventDefinition]],
        ]
    ] = None
    conditionalEventDefinition: Optional[
        Union[
            str,
            TConditionalEventDefinition,
            List[Union[str, TConditionalEventDefinition]],
        ]
    ] = None
    correlationProperty: Optional[
        Union[TCorrelationProperty, List[TCorrelationProperty]]
    ] = None
    dataStore: Optional[Union[TDataStore, List[TDataStore]]] = None
    endPoint: Optional[Union[TEndPoint, List[TEndPoint]]] = None
    error: Optional[Union[TError, List[TError]]] = None
    errorEventDefinition: Optional[
        Union[str, TErrorEventDefinition, List[Union[str, TErrorEventDefinition]]]
    ] = None
    escalation: Optional[Union[TEscalation, List[TEscalation]]] = None
    escalationEventDefinition: Optional[
        Union[
            str,
            TEscalationEventDefinition,
            List[Union[str, TEscalationEventDefinition]],
        ]
    ] = None
    eventDefinition: Optional[
        Union[str, TEventDefinition, List[Union[str, TEventDefinition]]]
    ] = None
    exporter: Optional[str] = None
    exporterVersion: Optional[str] = None
    expressionLanguage: Optional[str] = None
    extension: Optional[Union[TExtension, List[TExtension]]] = None
    globalBusinessRuleTask: Optional[
        Union[TGlobalBusinessRuleTask, List[TGlobalBusinessRuleTask]]
    ] = None
    globalChoreographyTask: Optional[
        Union[TGlobalChoreographyTask, List[TGlobalChoreographyTask]]
    ] = None
    globalConversation: Optional[
        Union[TGlobalConversation, List[TGlobalConversation]]
    ] = None
    globalManualTask: Optional[Union[TGlobalManualTask, List[TGlobalManualTask]]] = None
    globalScriptTask: Optional[Union[TGlobalScriptTask, List[TGlobalScriptTask]]] = None
    globalTask: Optional[Union[TGlobalTask, List[TGlobalTask]]] = None
    globalUserTask: Optional[Union[TGlobalUserTask, List[TGlobalUserTask]]] = None
    id: Optional[str] = None
    import_: Optional[Union[TImport, List[TImport]]] = Field(None, alias='import')
    interface: Optional[Union[TInterface, List[TInterface]]] = None
    itemDefinition: Optional[Union[TItemDefinition, List[TItemDefinition]]] = None
    linkEventDefinition: Optional[
        Union[str, TLinkEventDefinition, List[Union[str, TLinkEventDefinition]]]
    ] = None
    message: Optional[Union[TMessage, List[TMessage]]] = None
    messageEventDefinition: Optional[
        Union[str, TMessageEventDefinition, List[Union[str, TMessageEventDefinition]]]
    ] = None
    name: Optional[str] = None
    partnerEntity: Optional[Union[TPartnerEntity, List[TPartnerEntity]]] = None
    partnerRole: Optional[Union[TPartnerRole, List[TPartnerRole]]] = None
    process: Optional[Union[str, TProcess, List[Union[str, TProcess]]]] = None
    relationship: Optional[Union[TRelationship, List[TRelationship]]] = None
    resource: Optional[Union[TResource, List[TResource]]] = None
    rootElement: Optional[Union[TRootElement, List[TRootElement]]] = None
    signal: Optional[Union[TSignal, List[TSignal]]] = None
    signalEventDefinition: Optional[
        Union[str, TSignalEventDefinition, List[Union[str, TSignalEventDefinition]]]
    ] = None
    targetNamespace: str
    terminateEventDefinition: Optional[
        Union[
            str, TTerminateEventDefinition, List[Union[str, TTerminateEventDefinition]]
        ]
    ] = None
    timerEventDefinition: Optional[
        Union[str, TTimerEventDefinition, List[Union[str, TTimerEventDefinition]]]
    ] = None
    typeLanguage: Optional[str] = None


class TGlobalChoreographyTask(BaseModel):
    class Config:
        extra = Extra.forbid

    adHocSubProcess: Optional[Union[TAdHocSubProcess, List[TAdHocSubProcess]]] = None
    artifact: Optional[Union[TArtifact, List[TArtifact]]] = None
    association: Optional[Union[TAssociation, List[TAssociation]]] = None
    boundaryEvent: Optional[Union[TBoundaryEvent, List[TBoundaryEvent]]] = None
    businessRuleTask: Optional[Union[TBusinessRuleTask, List[TBusinessRuleTask]]] = None
    callActivity: Optional[Union[TCallActivity, List[TCallActivity]]] = None
    callChoreography: Optional[Union[TCallChoreography, List[TCallChoreography]]] = None
    callConversation: Optional[Union[TCallConversation, List[TCallConversation]]] = None
    choreographyRef: Optional[Union[str, List[str]]] = None
    choreographyTask: Optional[Union[TChoreographyTask, List[TChoreographyTask]]] = None
    complexGateway: Optional[Union[TComplexGateway, List[TComplexGateway]]] = None
    conversation: Optional[Union[TConversation, List[TConversation]]] = None
    conversationAssociation: Optional[
        Union[TConversationAssociation, List[TConversationAssociation]]
    ] = None
    conversationLink: Optional[Union[TConversationLink, List[TConversationLink]]] = None
    conversationNode: Optional[Union[TConversationNode, List[TConversationNode]]] = None
    correlationKey: Optional[Union[TCorrelationKey, List[TCorrelationKey]]] = None
    dataObject: Optional[Union[TDataObject, List[TDataObject]]] = None
    dataObjectReference: Optional[
        Union[TDataObjectReference, List[TDataObjectReference]]
    ] = None
    dataStoreReference: Optional[
        Union[TDataStoreReference, List[TDataStoreReference]]
    ] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    endEvent: Optional[Union[TEndEvent, List[TEndEvent]]] = None
    event: Optional[Union[TEvent, List[TEvent]]] = None
    eventBasedGateway: Optional[
        Union[TEventBasedGateway, List[TEventBasedGateway]]
    ] = None
    exclusiveGateway: Optional[Union[TExclusiveGateway, List[TExclusiveGateway]]] = None
    extensionElements: Optional[TExtensionElements] = None
    flowElement: Optional[Union[TFlowElement, List[TFlowElement]]] = None
    group: Optional[Union[TGroup, List[TGroup]]] = None
    id: Optional[str] = None
    implicitThrowEvent: Optional[
        Union[TImplicitThrowEvent, List[TImplicitThrowEvent]]
    ] = None
    inclusiveGateway: Optional[Union[TInclusiveGateway, List[TInclusiveGateway]]] = None
    initiatingParticipantRef: Optional[str] = None
    intermediateCatchEvent: Optional[
        Union[TIntermediateCatchEvent, List[TIntermediateCatchEvent]]
    ] = None
    intermediateThrowEvent: Optional[
        Union[TIntermediateThrowEvent, List[TIntermediateThrowEvent]]
    ] = None
    isClosed: Optional[bool] = None
    manualTask: Optional[Union[TManualTask, List[TManualTask]]] = None
    messageFlow: Optional[Union[TMessageFlow, List[TMessageFlow]]] = None
    messageFlowAssociation: Optional[
        Union[TMessageFlowAssociation, List[TMessageFlowAssociation]]
    ] = None
    name: Optional[str] = None
    parallelGateway: Optional[Union[TParallelGateway, List[TParallelGateway]]] = None
    participant: Optional[Union[TParticipant, List[TParticipant]]] = None
    participantAssociation: Optional[
        Union[TParticipantAssociation, List[TParticipantAssociation]]
    ] = None
    receiveTask: Optional[Union[TReceiveTask, List[TReceiveTask]]] = None
    scriptTask: Optional[Union[TScriptTask, List[TScriptTask]]] = None
    sendTask: Optional[Union[TSendTask, List[TSendTask]]] = None
    sequenceFlow: Optional[Union[TSequenceFlow, List[TSequenceFlow]]] = None
    serviceTask: Optional[Union[TServiceTask, List[TServiceTask]]] = None
    startEvent: Optional[Union[TStartEvent, List[TStartEvent]]] = None
    subChoreography: Optional[Union[TSubChoreography, List[TSubChoreography]]] = None
    subConversation: Optional[Union[TSubConversation, List[TSubConversation]]] = None
    subProcess: Optional[Union[TSubProcess, List[TSubProcess]]] = None
    task: Optional[Union[TTask, List[TTask]]] = None
    textAnnotation: Optional[Union[TTextAnnotation, List[TTextAnnotation]]] = None
    transaction: Optional[Union[TTransaction, List[TTransaction]]] = None
    userTask: Optional[Union[TUserTask, List[TUserTask]]] = None


class TLane(BaseModel):
    class Config:
        extra = Extra.forbid

    childLaneSet: Optional[TLaneSet] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    flowNodeRef: Optional[Union[str, List[str]]] = None
    id: Optional[str] = None
    name: Optional[str] = None
    partitionElement: Optional[TBaseElement] = None
    partitionElementRef: Optional[str] = None


class TLaneSet(BaseModel):
    class Config:
        extra = Extra.forbid

    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    extensionElements: Optional[TExtensionElements] = None
    id: Optional[str] = None
    lane: Optional[Union[TLane, List[TLane]]] = None
    name: Optional[str] = None


class TProcess(BaseModel):
    adHocSubProcess: Optional[Union[TAdHocSubProcess, List[TAdHocSubProcess]]] = None
    artifact: Optional[Union[TArtifact, List[TArtifact]]] = None
    association: Optional[Union[TAssociation, List[TAssociation]]] = None
    auditing: Optional[TAuditing] = None
    boundaryEvent: Optional[Union[TBoundaryEvent, List[TBoundaryEvent]]] = None
    businessRuleTask: Optional[Union[TBusinessRuleTask, List[TBusinessRuleTask]]] = None
    callActivity: Optional[Union[TCallActivity, List[TCallActivity]]] = None
    callChoreography: Optional[Union[TCallChoreography, List[TCallChoreography]]] = None
    choreographyTask: Optional[Union[TChoreographyTask, List[TChoreographyTask]]] = None
    complexGateway: Optional[Union[TComplexGateway, List[TComplexGateway]]] = None
    correlationSubscription: Optional[
        Union[TCorrelationSubscription, List[TCorrelationSubscription]]
    ] = None
    dataObject: Optional[Union[TDataObject, List[TDataObject]]] = None
    dataObjectReference: Optional[
        Union[TDataObjectReference, List[TDataObjectReference]]
    ] = None
    dataStoreReference: Optional[
        Union[TDataStoreReference, List[TDataStoreReference]]
    ] = None
    definitionalCollaborationRef: Optional[str] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    endEvent: Optional[Union[TEndEvent, List[TEndEvent]]] = None
    event: Optional[Union[TEvent, List[TEvent]]] = None
    eventBasedGateway: Optional[
        Union[TEventBasedGateway, List[TEventBasedGateway]]
    ] = None
    exclusiveGateway: Optional[Union[TExclusiveGateway, List[TExclusiveGateway]]] = None
    extensionElements: Optional[TExtensionElements] = None
    flowElement: Optional[Union[TFlowElement, List[TFlowElement]]] = None
    group: Optional[Union[TGroup, List[TGroup]]] = None
    humanPerformer: Optional[Union[THumanPerformer, List[THumanPerformer]]] = None
    id: Optional[str] = None
    implicitThrowEvent: Optional[
        Union[TImplicitThrowEvent, List[TImplicitThrowEvent]]
    ] = None
    inclusiveGateway: Optional[Union[TInclusiveGateway, List[TInclusiveGateway]]] = None
    intermediateCatchEvent: Optional[
        Union[TIntermediateCatchEvent, List[TIntermediateCatchEvent]]
    ] = None
    intermediateThrowEvent: Optional[
        Union[TIntermediateThrowEvent, List[TIntermediateThrowEvent]]
    ] = None
    ioBinding: Optional[List[TInputOutputBinding]] = None
    ioSpecification: Optional[TInputOutputSpecification] = None
    isClosed: Optional[bool] = None
    isExecutable: Optional[bool] = None
    laneSet: Optional[Union[TLaneSet, List[TLaneSet]]] = None
    manualTask: Optional[Union[TManualTask, List[TManualTask]]] = None
    monitoring: Optional[TMonitoring] = None
    name: Optional[str] = None
    parallelGateway: Optional[Union[TParallelGateway, List[TParallelGateway]]] = None
    performer: Optional[Union[TPerformer, List[TPerformer]]] = None
    potentialOwner: Optional[Union[TPotentialOwner, List[TPotentialOwner]]] = None
    processType: Optional[TProcessType] = None
    property: Optional[Union[TProperty, List[TProperty]]] = None
    receiveTask: Optional[Union[TReceiveTask, List[TReceiveTask]]] = None
    resourceRole: Optional[Union[TResourceRole, List[TResourceRole]]] = None
    scriptTask: Optional[Union[TScriptTask, List[TScriptTask]]] = None
    sendTask: Optional[Union[TSendTask, List[TSendTask]]] = None
    sequenceFlow: Optional[Union[TSequenceFlow, List[TSequenceFlow]]] = None
    serviceTask: Optional[Union[TServiceTask, List[TServiceTask]]] = None
    startEvent: Optional[Union[TStartEvent, List[TStartEvent]]] = None
    subChoreography: Optional[Union[TSubChoreography, List[TSubChoreography]]] = None
    subProcess: Optional[Union[TSubProcess, List[TSubProcess]]] = None
    supportedInterfaceRef: Optional[List[str]] = None
    supports: Optional[Union[str, List[str]]] = None
    task: Optional[Union[TTask, List[TTask]]] = None
    textAnnotation: Optional[Union[TTextAnnotation, List[TTextAnnotation]]] = None
    transaction: Optional[Union[TTransaction, List[TTransaction]]] = None
    userTask: Optional[Union[TUserTask, List[TUserTask]]] = None


class TSubChoreography(BaseModel):
    class Config:
        extra = Extra.forbid

    adHocSubProcess: Optional[Union[TAdHocSubProcess, List[TAdHocSubProcess]]] = None
    artifact: Optional[Union[TArtifact, List[TArtifact]]] = None
    association: Optional[Union[TAssociation, List[TAssociation]]] = None
    auditing: Optional[TAuditing] = None
    boundaryEvent: Optional[Union[TBoundaryEvent, List[TBoundaryEvent]]] = None
    businessRuleTask: Optional[Union[TBusinessRuleTask, List[TBusinessRuleTask]]] = None
    callActivity: Optional[Union[TCallActivity, List[TCallActivity]]] = None
    callChoreography: Optional[Union[TCallChoreography, List[TCallChoreography]]] = None
    categoryValueRef: Optional[Union[str, List[str]]] = None
    choreographyTask: Optional[Union[TChoreographyTask, List[TChoreographyTask]]] = None
    complexGateway: Optional[Union[TComplexGateway, List[TComplexGateway]]] = None
    correlationKey: Optional[Union[TCorrelationKey, List[TCorrelationKey]]] = None
    dataObject: Optional[Union[TDataObject, List[TDataObject]]] = None
    dataObjectReference: Optional[
        Union[TDataObjectReference, List[TDataObjectReference]]
    ] = None
    dataStoreReference: Optional[
        Union[TDataStoreReference, List[TDataStoreReference]]
    ] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    endEvent: Optional[Union[TEndEvent, List[TEndEvent]]] = None
    event: Optional[Union[TEvent, List[TEvent]]] = None
    eventBasedGateway: Optional[
        Union[TEventBasedGateway, List[TEventBasedGateway]]
    ] = None
    exclusiveGateway: Optional[Union[TExclusiveGateway, List[TExclusiveGateway]]] = None
    extensionElements: Optional[TExtensionElements] = None
    flowElement: Optional[Union[TFlowElement, List[TFlowElement]]] = None
    group: Optional[Union[TGroup, List[TGroup]]] = None
    id: Optional[str] = None
    implicitThrowEvent: Optional[
        Union[TImplicitThrowEvent, List[TImplicitThrowEvent]]
    ] = None
    inclusiveGateway: Optional[Union[TInclusiveGateway, List[TInclusiveGateway]]] = None
    incoming: Optional[Union[str, List[str]]] = None
    initiatingParticipantRef: str
    intermediateCatchEvent: Optional[
        Union[TIntermediateCatchEvent, List[TIntermediateCatchEvent]]
    ] = None
    intermediateThrowEvent: Optional[
        Union[TIntermediateThrowEvent, List[TIntermediateThrowEvent]]
    ] = None
    loopType: Optional[LoopType] = None
    manualTask: Optional[Union[TManualTask, List[TManualTask]]] = None
    monitoring: Optional[TMonitoring] = None
    name: Optional[str] = None
    outgoing: Optional[Union[str, List[str]]] = None
    parallelGateway: Optional[Union[TParallelGateway, List[TParallelGateway]]] = None
    participantRef: Union[str, List[str]]
    receiveTask: Optional[Union[TReceiveTask, List[TReceiveTask]]] = None
    scriptTask: Optional[Union[TScriptTask, List[TScriptTask]]] = None
    sendTask: Optional[Union[TSendTask, List[TSendTask]]] = None
    sequenceFlow: Optional[Union[TSequenceFlow, List[TSequenceFlow]]] = None
    serviceTask: Optional[Union[TServiceTask, List[TServiceTask]]] = None
    startEvent: Optional[Union[TStartEvent, List[TStartEvent]]] = None
    subChoreography: Optional[Union[TSubChoreography, List[TSubChoreography]]] = None
    subProcess: Optional[Union[TSubProcess, List[TSubProcess]]] = None
    task: Optional[Union[TTask, List[TTask]]] = None
    textAnnotation: Optional[Union[TTextAnnotation, List[TTextAnnotation]]] = None
    transaction: Optional[Union[TTransaction, List[TTransaction]]] = None
    userTask: Optional[Union[TUserTask, List[TUserTask]]] = None


class TSubProcess(BaseModel):
    adHocSubProcess: Optional[Union[TAdHocSubProcess, List[TAdHocSubProcess]]] = None
    artifact: Optional[Union[TArtifact, List[TArtifact]]] = None
    association: Optional[Union[TAssociation, List[TAssociation]]] = None
    auditing: Optional[TAuditing] = None
    boundaryEvent: Optional[Union[TBoundaryEvent, List[TBoundaryEvent]]] = None
    businessRuleTask: Optional[Union[TBusinessRuleTask, List[TBusinessRuleTask]]] = None
    callActivity: Optional[Union[TCallActivity, List[TCallActivity]]] = None
    callChoreography: Optional[Union[TCallChoreography, List[TCallChoreography]]] = None
    categoryValueRef: Optional[Union[str, List[str]]] = None
    choreographyTask: Optional[Union[TChoreographyTask, List[TChoreographyTask]]] = None
    completionQuantity: Optional[float] = None
    complexGateway: Optional[Union[TComplexGateway, List[TComplexGateway]]] = None
    dataInputAssociation: Optional[
        Union[TDataInputAssociation, List[TDataInputAssociation]]
    ] = None
    dataObject: Optional[Union[TDataObject, List[TDataObject]]] = None
    dataObjectReference: Optional[
        Union[TDataObjectReference, List[TDataObjectReference]]
    ] = None
    dataOutputAssociation: Optional[
        Union[TDataOutputAssociation, List[TDataOutputAssociation]]
    ] = None
    dataStoreReference: Optional[
        Union[TDataStoreReference, List[TDataStoreReference]]
    ] = None
    default: Optional[str] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    endEvent: Optional[Union[TEndEvent, List[TEndEvent]]] = None
    event: Optional[Union[TEvent, List[TEvent]]] = None
    eventBasedGateway: Optional[
        Union[TEventBasedGateway, List[TEventBasedGateway]]
    ] = None
    exclusiveGateway: Optional[Union[TExclusiveGateway, List[TExclusiveGateway]]] = None
    extensionElements: Optional[TExtensionElements] = None
    flowElement: Optional[Union[TFlowElement, List[TFlowElement]]] = None
    group: Optional[Union[TGroup, List[TGroup]]] = None
    humanPerformer: Optional[Union[THumanPerformer, List[THumanPerformer]]] = None
    id: Optional[str] = None
    implicitThrowEvent: Optional[
        Union[TImplicitThrowEvent, List[TImplicitThrowEvent]]
    ] = None
    inclusiveGateway: Optional[Union[TInclusiveGateway, List[TInclusiveGateway]]] = None
    incoming: Optional[Union[str, List[str]]] = None
    intermediateCatchEvent: Optional[
        Union[TIntermediateCatchEvent, List[TIntermediateCatchEvent]]
    ] = None
    intermediateThrowEvent: Optional[
        Union[TIntermediateThrowEvent, List[TIntermediateThrowEvent]]
    ] = None
    ioSpecification: Optional[TInputOutputSpecification] = None
    isForCompensation: Optional[bool] = None
    laneSet: Optional[Union[TLaneSet, List[TLaneSet]]] = None
    loopCharacteristics: Optional[
        Union[str, TLoopCharacteristics, List[Union[str, TLoopCharacteristics]]]
    ] = None
    manualTask: Optional[Union[TManualTask, List[TManualTask]]] = None
    monitoring: Optional[TMonitoring] = None
    multiInstanceLoopCharacteristics: Optional[
        Union[
            str,
            TMultiInstanceLoopCharacteristics,
            List[Union[str, TMultiInstanceLoopCharacteristics]],
        ]
    ] = None
    name: Optional[str] = None
    outgoing: Optional[Union[str, List[str]]] = None
    parallelGateway: Optional[Union[TParallelGateway, List[TParallelGateway]]] = None
    performer: Optional[Union[TPerformer, List[TPerformer]]] = None
    potentialOwner: Optional[Union[TPotentialOwner, List[TPotentialOwner]]] = None
    property: Optional[Union[TProperty, List[TProperty]]] = None
    receiveTask: Optional[Union[TReceiveTask, List[TReceiveTask]]] = None
    resourceRole: Optional[Union[TResourceRole, List[TResourceRole]]] = None
    scriptTask: Optional[Union[TScriptTask, List[TScriptTask]]] = None
    sendTask: Optional[Union[TSendTask, List[TSendTask]]] = None
    sequenceFlow: Optional[Union[TSequenceFlow, List[TSequenceFlow]]] = None
    serviceTask: Optional[Union[TServiceTask, List[TServiceTask]]] = None
    standardLoopCharacteristics: Optional[
        Union[
            str,
            TStandardLoopCharacteristics,
            List[Union[str, TStandardLoopCharacteristics]],
        ]
    ] = None
    startEvent: Optional[Union[TStartEvent, List[TStartEvent]]] = None
    startQuantity: Optional[float] = None
    subChoreography: Optional[Union[TSubChoreography, List[TSubChoreography]]] = None
    subProcess: Optional[Union[TSubProcess, List[TSubProcess]]] = None
    task: Optional[Union[TTask, List[TTask]]] = None
    textAnnotation: Optional[Union[TTextAnnotation, List[TTextAnnotation]]] = None
    transaction: Optional[Union[TTransaction, List[TTransaction]]] = None
    triggeredByEvent: Optional[bool] = None
    userTask: Optional[Union[TUserTask, List[TUserTask]]] = None


class TTransaction(BaseModel):
    adHocSubProcess: Optional[Union[TAdHocSubProcess, List[TAdHocSubProcess]]] = None
    artifact: Optional[Union[TArtifact, List[TArtifact]]] = None
    association: Optional[Union[TAssociation, List[TAssociation]]] = None
    auditing: Optional[TAuditing] = None
    boundaryEvent: Optional[Union[TBoundaryEvent, List[TBoundaryEvent]]] = None
    businessRuleTask: Optional[Union[TBusinessRuleTask, List[TBusinessRuleTask]]] = None
    callActivity: Optional[Union[TCallActivity, List[TCallActivity]]] = None
    callChoreography: Optional[Union[TCallChoreography, List[TCallChoreography]]] = None
    categoryValueRef: Optional[Union[str, List[str]]] = None
    choreographyTask: Optional[Union[TChoreographyTask, List[TChoreographyTask]]] = None
    completionQuantity: Optional[float] = None
    complexGateway: Optional[Union[TComplexGateway, List[TComplexGateway]]] = None
    dataInputAssociation: Optional[
        Union[TDataInputAssociation, List[TDataInputAssociation]]
    ] = None
    dataObject: Optional[Union[TDataObject, List[TDataObject]]] = None
    dataObjectReference: Optional[
        Union[TDataObjectReference, List[TDataObjectReference]]
    ] = None
    dataOutputAssociation: Optional[
        Union[TDataOutputAssociation, List[TDataOutputAssociation]]
    ] = None
    dataStoreReference: Optional[
        Union[TDataStoreReference, List[TDataStoreReference]]
    ] = None
    default: Optional[str] = None
    documentation: Optional[Union[TDocumentation, List[TDocumentation]]] = None
    endEvent: Optional[Union[TEndEvent, List[TEndEvent]]] = None
    event: Optional[Union[TEvent, List[TEvent]]] = None
    eventBasedGateway: Optional[
        Union[TEventBasedGateway, List[TEventBasedGateway]]
    ] = None
    exclusiveGateway: Optional[Union[TExclusiveGateway, List[TExclusiveGateway]]] = None
    extensionElements: Optional[TExtensionElements] = None
    flowElement: Optional[Union[TFlowElement, List[TFlowElement]]] = None
    group: Optional[Union[TGroup, List[TGroup]]] = None
    humanPerformer: Optional[Union[THumanPerformer, List[THumanPerformer]]] = None
    id: Optional[str] = None
    implicitThrowEvent: Optional[
        Union[TImplicitThrowEvent, List[TImplicitThrowEvent]]
    ] = None
    inclusiveGateway: Optional[Union[TInclusiveGateway, List[TInclusiveGateway]]] = None
    incoming: Optional[Union[str, List[str]]] = None
    intermediateCatchEvent: Optional[
        Union[TIntermediateCatchEvent, List[TIntermediateCatchEvent]]
    ] = None
    intermediateThrowEvent: Optional[
        Union[TIntermediateThrowEvent, List[TIntermediateThrowEvent]]
    ] = None
    ioSpecification: Optional[TInputOutputSpecification] = None
    isForCompensation: Optional[bool] = None
    laneSet: Optional[Union[TLaneSet, List[TLaneSet]]] = None
    loopCharacteristics: Optional[
        Union[str, TLoopCharacteristics, List[Union[str, TLoopCharacteristics]]]
    ] = None
    manualTask: Optional[Union[TManualTask, List[TManualTask]]] = None
    method: Optional[Method] = None
    monitoring: Optional[TMonitoring] = None
    multiInstanceLoopCharacteristics: Optional[
        Union[
            str,
            TMultiInstanceLoopCharacteristics,
            List[Union[str, TMultiInstanceLoopCharacteristics]],
        ]
    ] = None
    name: Optional[str] = None
    outgoing: Optional[Union[str, List[str]]] = None
    parallelGateway: Optional[Union[TParallelGateway, List[TParallelGateway]]] = None
    performer: Optional[Union[TPerformer, List[TPerformer]]] = None
    potentialOwner: Optional[Union[TPotentialOwner, List[TPotentialOwner]]] = None
    property: Optional[Union[TProperty, List[TProperty]]] = None
    receiveTask: Optional[Union[TReceiveTask, List[TReceiveTask]]] = None
    resourceRole: Optional[Union[TResourceRole, List[TResourceRole]]] = None
    scriptTask: Optional[Union[TScriptTask, List[TScriptTask]]] = None
    sendTask: Optional[Union[TSendTask, List[TSendTask]]] = None
    sequenceFlow: Optional[Union[TSequenceFlow, List[TSequenceFlow]]] = None
    serviceTask: Optional[Union[TServiceTask, List[TServiceTask]]] = None
    standardLoopCharacteristics: Optional[
        Union[
            str,
            TStandardLoopCharacteristics,
            List[Union[str, TStandardLoopCharacteristics]],
        ]
    ] = None
    startEvent: Optional[Union[TStartEvent, List[TStartEvent]]] = None
    startQuantity: Optional[float] = None
    subChoreography: Optional[Union[TSubChoreography, List[TSubChoreography]]] = None
    subProcess: Optional[Union[TSubProcess, List[TSubProcess]]] = None
    task: Optional[Union[TTask, List[TTask]]] = None
    textAnnotation: Optional[Union[TTextAnnotation, List[TTextAnnotation]]] = None
    transaction: Optional[Union[TTransaction, List[TTransaction]]] = None
    triggeredByEvent: Optional[bool] = None
    userTask: Optional[Union[TUserTask, List[TUserTask]]] = None


BpmnJsonModel.update_forward_refs()
TAdHocSubProcess.update_forward_refs()
TChoreography.update_forward_refs()
TDefinitions.update_forward_refs()
TGlobalChoreographyTask.update_forward_refs()
TLane.update_forward_refs()
TProcess.update_forward_refs()
TSubChoreography.update_forward_refs()
TSubProcess.update_forward_refs()
